# recreate_database.py
from app import app, db
from models import User, UserCurrency, ShopCategory, ShopItem, UserInventory, CurrencyTransaction
import os
import bcrypt
import sqlite3

def recreate_database():
    print("üîÑ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    if os.path.exists('itired.db'):
        os.remove('itired.db')
        print("üóëÔ∏è –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
    
    with app.app_context():
        db.create_all()
        print("‚úÖ –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã SQLAlchemy —Å–æ–∑–¥–∞–Ω—ã")
        
        create_sqlite_tables()
        
        init_shop_data()
        create_admin_user()
        
        print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")

def create_sqlite_tables():
    """–°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã SQLite"""
    try:
        conn = sqlite3.connect('itired.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                display_name TEXT,
                email TEXT UNIQUE,
                password_hash TEXT NOT NULL,
                yandex_token TEXT,
                vk_token TEXT,
                avatar_url TEXT,
                bio TEXT,
                email_verified BOOLEAN DEFAULT FALSE,
                verification_code TEXT,
                verification_code_expires DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_settings (
                user_id INTEGER PRIMARY KEY,
                theme TEXT DEFAULT 'dark',
                language TEXT DEFAULT 'ru',
                auto_play BOOLEAN DEFAULT TRUE,
                show_explicit BOOLEAN DEFAULT TRUE,
                music_service TEXT DEFAULT 'yandex',
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_activity (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                activity_type TEXT NOT NULL,
                activity_data TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥—Ä—É–∑–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS friends (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                friend_id INTEGER,
                status TEXT DEFAULT 'pending',
                taste_match INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (friend_id) REFERENCES users (id),
                UNIQUE(user_id, friend_id)
            )
        ''')
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS listening_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                track_id TEXT,
                track_data TEXT,
                played_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–º—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_themes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT NOT NULL,
                colors TEXT NOT NULL,
                background_url TEXT,
                is_default BOOLEAN DEFAULT FALSE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ SQLite —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQLite —Ç–∞–±–ª–∏—Ü: {e}")

def init_shop_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            ('themes', '–¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è', 'fas fa-palette'),
            ('avatars', '–ê–≤–∞—Ç–∞—Ä—ã', 'fas fa-user'),
            ('banners', '–ë–∞–Ω–Ω–µ—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è', 'fas fa-image'),
            ('badges', '–ë–µ–π–¥–∂–∏', 'fas fa-medal'),
            ('effects', '–≠—Ñ—Ñ–µ–∫—Ç—ã –ø–ª–µ–µ—Ä–∞', 'fas fa-magic'),
            ('animations', '–ê–Ω–∏–º–∞—Ü–∏–∏', 'fas fa-film')
        ]
        
        for cat_name, cat_desc, cat_icon in categories:
            category = ShopCategory.query.filter_by(name=cat_name).first()
            if not category:
                category = ShopCategory(
                    name=cat_name,
                    description=cat_desc,
                    icon=cat_icon
                )
                db.session.add(category)
        
        db.session.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        shop_items = [
            ('–¢–µ–º–Ω–∞—è —Ç–µ–º–∞ Premium', 'theme', 'themes', 50, 
             '{"styles": {"--bg-primary": "#0a0a0a", "--bg-secondary": "#141414", "--accent": "#ff6b6b", "--text-primary": "#ffffff"}}', 'rare'),
            
            ('–°–∏–Ω—è—è —Ç–µ–º–∞ Ocean', 'theme', 'themes', 40,
             '{"styles": {"--bg-primary": "#0a1929", "--bg-secondary": "#132f4c", "--accent": "#1976d2", "--text-primary": "#e3f2fd"}}', 'common'),
            
            ('–ê–≤–∞—Ç–∞—Ä "–ó–≤–µ–∑–¥–∞"', 'avatar', 'avatars', 20,
             '{"image_url": "/static/shop/avatars/star.png", "unlockable": true}', 'common'),
            
            ('–ê–≤–∞—Ç–∞—Ä "–õ—É–Ω–Ω—ã–π —Å–≤–µ—Ç"', 'avatar', 'avatars', 25,
             '{"image_url": "/static/shop/avatars/moon.png", "unlockable": true}', 'common'),
            
            ('–ë–µ–π–¥–∂ "–ú–µ–ª–æ–º–∞–Ω"', 'badge', 'badges', 15,
             '{"text": "üéµ –ú–µ–ª–æ–º–∞–Ω", "color": "#ff6b6b", "animation": "pulse"}', 'common'),
            
            ('–ë–µ–π–¥–∂ "VIP"', 'badge', 'badges', 30,
             '{"text": "‚≠ê VIP", "color": "#ffd700", "animation": "glow"}', 'rare'),
            
            ('–≠—Ñ—Ñ–µ–∫—Ç "–ù–µ–æ–Ω–æ–≤–æ–µ —Å–∏—è–Ω–∏–µ"', 'effect', 'effects', 75,
             '{"css": ".player { filter: drop-shadow(0 0 10px #ff00ff); }", "duration": 30000}', 'epic'),
            
            ('–ê–Ω–∏–º–∞—Ü–∏—è "–í—Ä–∞—â–µ–Ω–∏–µ"', 'animation', 'animations', 45,
             '{"css": "@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }", "element": ".album-cover"}', 'rare')
        ]
        
        for name, item_type, category_name, price, data, rarity in shop_items:
            category = ShopCategory.query.filter_by(name=category_name).first()
            if category:
                item = ShopItem.query.filter_by(name=name).first()
                if not item:
                    item = ShopItem(
                        name=name,
                        type=item_type,
                        category_id=category.id,
                        price=price,
                        data=data,
                        rarity=rarity
                    )
                    db.session.add(item)
        
        db.session.commit()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
        db.session.rollback()

def create_admin_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        admin_user = User.query.filter_by(username='admin').first()
        if not admin_user:
            password_hash = bcrypt.hashpw('admin123'.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            admin_user = User(
                username='admin',
                email='admin@itired.com',
                password_hash=password_hash,
                display_name='Administrator',
                is_admin=True,
                email_verified=True
            )
            db.session.add(admin_user)
            db.session.commit()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –∞–¥–º–∏–Ω—É
            currency = UserCurrency(user_id=admin_user.id, balance=1000)
            db.session.add(currency)
            db.session.commit()
            
            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin / admin123")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        db.session.rollback()

if __name__ == '__main__':
    recreate_database()